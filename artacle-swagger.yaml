openapi: 3.0.0
# servers: #[]
#   - url: https://api.artacle.io/
#     description: Artacle production endpoint. API Key is required
info:
  description: >-
      OpenAPI 3.0 based swagger docs for [Artacle](https://artacle.io) Public API.
      
      
      The API base URL is [https://api.artacle.io/v1/](https://api.artacle.io/v1/). An API Key is required to use the API. Contact us via [api@artacle.io](mailto:api@artacle.io) to request one. Please describe your project in short. The API related to profiles is given to chosen partners only at the moment.
      
      
      We ask you to indicate in your app that the data was obtained from Artacle, i.e. by providing links to the Artacle website.
  version: "1.0.0"
  title: Artacle Public API

paths:
# Collections List:
  /collections:
    get:
      tags:
        - Collections
      summary: Get list of NFT collections listed on Artacle
      description: |
        Returns an array of all Artacle collections with their respective information such as Artacle slug, internal ID, etc. Pagination can be applied.
      parameters:
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
        - name: limit
          in: query
          description: Max number of records to return
          schema:
            type: integer
            maximum: 1000
            default: 50
        - name: offset
          in: query
          description: Number of records to skip for pagination
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of collections, paginated
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - is_finalized
                properties:
                  data:
                    type: array
                    description: Array of Collection Info
                    items:
                      allOf:
                      - $ref: '#/components/schemas/Collection'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"


  # Collection Rarity
  /collections/{cid}/rarity:
    get:
      tags:
        - Rarity Ranks
      summary: Get the Rarity Ranks information for all tokens in a collection
      description: Returns an array of all collection tokens with their rarity ranks. Those tokens that does not have a rank assigned will also be returned, with rank set to null. The response will indicate whether rarity was calculated for all tokens or not.
      parameters:
        - name: cid
          in: path
          required: true
          description: Artacle collection ID as returned by the /collections/ endpoint
          schema:
            type: integer
            example: 78
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
        - name: limit
          in: query
          description: Max number of tokens to return
          schema:
            type: integer
            maximum: 1000
            default: 50
        - name: offset
          in: query
          description: Number of tokens to skip for pagination
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Success, returns list of tokens with their rarity ranks, paginated
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - is_finalized
                properties:
                  data:
                    type: array
                    description: Array of Token Rarity info
                    items:
                      allOf:
                      - $ref: '#/components/schemas/TokenRarity'
                  is_finalized:
                    type: boolean
                    description: A flag indicating whether the rarity was calculated based on all tokens' meta data
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
# Token Rarity
  /collections/{cid}/tokens/{tid}/rarity:
    get:
      tags:
        - Rarity Ranks
      summary: Get the Rarity Rank information for a specific token ID within a specific collection
      description: Returns the rarity rank for a specific token. The response will indicate whether rarity was calculated for all tokens in a collection or not.
      parameters:
        - name: cid
          in: path
          required: true
          description: Artacle collection ID as returned by the /collections/ endpoint
          schema:
            type: integer
            example: 78
        - name: tid
          in: path
          required: true
          description: Token ID as specified in a smart contract (for example, 1 for Bored Apes Yacht Club or 78000001 for Art Blocks Fidenza)
          schema:
            type: integer
            example: 78000001
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
      responses:
        '200':
          description: Success, returns Rarity Rank of a specific token
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - is_finalized
                properties:
                  data:
                    $ref: '#/components/schemas/TokenRarity'
                  is_finalized:
                    type: boolean
                    description: A flag indicating whether the rarity was calculated based on all tokens' meta data
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"

  # Collection Physical Print
  /collections/{cid}/print:
    get:
      tags:
        - Physical Prints
      summary: Get the Physical Prints information for all tokens in a collection
      description: Returns an array of all collection tokens with their physical prints.
      parameters:
        - name: cid
          in: path
          required: true
          description: Artacle collection ID as returned by the /collections/ endpoint
          schema:
            type: integer
            example: 78
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
        - name: limit
          in: query
          description: Max number of tokens to return. 1 to 1000.
          schema:
            type: integer
            maximum: 1000
            default: 100
        - name: offset
          in: query
          description: Number of tokens to skip for pagination
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Success, returns list of tokens with their physical prints, paginated
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - hasMoreData
                properties:
                  data:
                    type: array
                    description: Array of Token Physical Print info
                    items:
                      allOf:
                      - $ref: '#/components/schemas/TokenPhysicalPrint'
                  hasMoreData:
                    type: boolean
                    description: A flag indicating whether there are more data or not
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"

# Token Physical Print
  /collections/{cid}/tokens/{tid}/print:
    get:
      tags:
        - Physical Prints
      summary: Get the Physical Print information for a specific token ID within a specific collection
      description: Returns the physical print information for a specific token.
      parameters:
        - name: cid
          in: path
          required: true
          description: Artacle collection ID as returned by the /collections/ endpoint
          schema:
            type: integer
            example: 78
        - name: tid
          in: path
          required: true
          description: Token ID as specified in a smart contract (for example, 1 for Bored Apes Yacht Club or 78000001 for Art Blocks Fidenza)
          schema:
            type: integer
            example: 78000001
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
      responses:
        '200':
          description: Success, returns physical print information of a specific token
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/TokenPhysicalPrint'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"

# Profile
  /profile/{address}:
    get:
      tags:
        - Profile
        
      summary: Get profile information for a specific wallet address
      description: Returns attributes and parameters of a specific Ethereum address. The attributes are calculated by Artacle based on wallet’s historical behavior as described [here](https://medium.com/@artacle/who-is-who-in-the-nft-world-95138e5a6e62).
      parameters:
        - name: address
          in: path
          required: true
          description: Wallet’s Ethereum address
          schema:
            type: string
            minLength: 42
            maxLength: 42
            pattern: ^0x[a-fA-F0-9]{40}$
            example: "0x9df947cd8a9810964473339c38a95201ecbe112d"
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
      responses:
        '200':
          description: Success, returns profile information for a specific wallet address
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProfileInfo'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
# Profiles
  /profiles/search:
    get:
      tags:
        - Profiles

      summary: Beta. Retrieve a list of profiles via a single call
      description: Retrieve a list of profiles according to given conditions. Pagination is enabled. At least one filtering condition should be specified.
      parameters:
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
        - name: limit
          in: query
          description: "Pagination: how many records to be returned. 1 to 1000."
          schema:
            type: integer
            format: int32
            default: 100
            example: 1000
        - name: cursor
          in: query
          description: "Pagination: cursor to request the next page of profiles for a subsequent call."
          schema:
            type: string
            example: "0x9df947cd8a9810964473339c38a95201ecbe112d"
        - name: detailed
          in: query
          description: "Result formatting: only addresses will be returned on GET request if false. Otherwise all available scores and attributes will be returned for each profile."
          schema:
            type: boolean
            default: false
            example: true
        - name: tags
          in: query
          description: Filtering condition on tags. If multiple tags were specified, profiles matching all of the provided tags will be returned.
          schema:
            type: string
            example: Grailer
        - name: allByAuthors
          in: query
          description: Filtering condition on allByAuthors. If multiple allByAuthors were specified, profiles matching all of the provided authors will be returned.
          schema:
            type: string
            example: Alexis André
        - name: ribbons
          in: query
          description: Filtering condition on ribbons. If multiple ribbons were specified, profiles matching all of the provided ribbons will be returned.
          schema:
            type: string
            enum:
              - Diamond holder
              - Curator
              - Master trader
            example: Curator
        - name: "[parameter]_[function]"
          in: query
          description: "Filtering condition on __scores__ or __attributes__ parameters. _[parameter]_ is one of parameters of the following profile sections: __scores__ or __attributes__. _[function]_ is one of the following arithmetic operations: _greater_ or _less_ - for __number__ parameters or similar ones for __date__ values: _after_ or _before_."
          schema:
            oneOf:
              - type: number
              - type: string
          examples:
            commitmentScore_less:
              value: 4.5
              description: Value of parameter _commitmentScore_ in __scores__ section of profile should be _less_ than 4.5
            commitmentScoreConfidence_greater:
              value: 0.85
              description: Value of parameter _commitmentScoreConfidence_ in __scores__ section of profile should be _greater_ than 0.85
            ABSince_after:
              value: "2021-04-13"
              description: Value of parameter _ABSince_ in __attributes__ section of profile should be _after_ 2021-04-13

      responses:
        '200':
          description: Success, returns the list of Etherium addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilesSearchSimpleResponse'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Profiles
        
      summary: Beta. Initialize a search resource for retrieving a list of profiles
      description: Create a search resource to retrieve a list of profiles (wallet addresses) matching the query specified in the POST body. The created search resource will expire in a hour.
      parameters:
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string
      requestBody:
        description: Configuration of the search resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfilesSearchConf'

      responses:
        '201':
          description: Success, returns the created search resource in Location header
          headers:
            Location:
              description:  Created search resource, e.g. "/profiles/search/LKxeLHSuHj7LcrXOlGYg1"
              schema:
                type: string

        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"

  /profiles/search/{searchId}:  
    get:
      tags:
        - Profiles
        
      summary: Beta. Retrieve a list of profiles based on the search resource
      description: Retrieve a list of profiles based on the previously created search resource. Pagination is enabled (make sure caching is disabled).
      parameters:
        - name: searchId
          in: path
          required: true
          description: Search resource id
          schema:
            type: string
            example: LKxeLHSuHj7LcrXOlGYg1
        - name: apiKey
          in: query
          required: true
          description: API access key
          schema:
            type: string

      responses:
        '200':
          description: Success, returns the list of Etherium addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfilesSearchResponse'
        '204':
          description: Search end. No more data.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '429':
          $ref: "#/components/responses/TooManyRequestsError"
        '500':
          $ref: "#/components/responses/InternalServerError"

# Schemas:
components:
  schemas:
    Collection:
      type: object
      required:
        - id
        - subProjectId
        - slug
        - tokenAddress
      properties:
        id:
          type: integer
          format: int32
          description: Artacle internal collection identifier. It is required to further address collections in the API.
          example: 78
        subProjectId:
          type: integer
          format: int32
          nullable: true
          description: Identifier of a collection within a shared smart contract (like Art Blocks or Bright Moment). Set to null if a collection is not deployed on a shared smart contract (like Bored Apes Yacht Club)
          example: 78
        slug:
          type: string
          description: A unique human readable collection identifier used in Artacle collection URLs
          example: fidenza
        tokenAddress:
          type: string
          description: Smart contract address of the collection, always lowecase
          minLength: 42
          maxLength: 42
          pattern: ^0x[a-f0-9]{40}$
          example: "0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270"
    TokenRarity:
      type: object
      required:
        - tokenId
        - rank
      properties:
        tokenId:
          type: string
          description: Token ID as per smart contract (for example, 1 for Bored Apes Yacht Club or 78000001 for Art Blocks Fidenza)
          example: 78000001
        rank:
          type: integer
          format: int32
          nullable: true
          description: Tokens Rarity Rank calculated by Artacle
          example: 1
          
    TokenPhysicalPrint:
      type: object
      required:
        - tokenId
        - isPrinted
        - printDate
      properties:
        tokenId:
          type: string
          description: Token ID as per smart contract (for example, 1 for Bored Apes Yacht Club or 78000001 for Art Blocks Fidenza)
          example: 78000001
        isPrinted:
          type: boolean
          description: A flag indicating whether the token was printed or not
          example: true
        printDate:
          type: string
          format: date
          description: The date when the token was printed
          nullable: true
          example: "2022-07-24"
          
    ProfileInfo:
      type: object
      required:
        - scores
        - tags
        - allByAuthors
        - attributes
      properties:
        scores:
          type: object
          description: Estimated scores
          properties:
            commitmentScore:
              type: number
              format: float
              description: Commitment score. It indicates whether a wallet tends to hold tokens or sell them quickly.
              nullable: true
              example: 3.43
            commitmentScoreConfidence:
              type: number
              format: float
              description: Commitment score confidence, based on the historical data availability. Zero to one.
              nullable: true
              example: 0.8
            tradingScore:
              type: number
              format: float
              description: Trading score. It indicates whether a wallet usually trades for a big or small profit or even a loss. Repeatability matters.
              nullable: true
              example: 3.162
            tradingScoreConfidence:
              type: number
              format: float
              description: Trading score confidence, based on the historical data availability. Zero to one.
              nullable: true
              example: 0.8
            curationScore:
              type: number
              format: float
              description: Curation score. It indicates whether a wallet thoroughly selected tokens that now have high market cap and liquidity. Many tokens of micro-cap collections would decrease this score.
              nullable: true
              example: 4.996
            curationScoreConfidence:
              type: number
              format: float
              description: Curation score confidence, based on the historical data availability. Zero to one.
              nullable: true
              example: 0.95
            ribbons:
              type: array
              nullable: true
              description: Labels assigned to a wallet based on high score values.
              items:
                type: string
              example:
                - Diamond holder
                - Curator
                - Master trader
        tags:
          type: array
          nullable: true
          description: Labels assigned to a wallet based on its portfolio and historical behavior
          items:
            type: string
          example:
              - CryptoCitizen
              - All Series 1-8 AB Curated
              - AB Since 2021-06-05
        allByAuthors:
          type: array
          nullable: true
          description: Wallet owns at least one token of every collection created by the authors listed here
          items:
            type: string
          example:
              - Alexis André
              - Radix
        attributes:
          type: object
          nullable: true
          description: A number of key-value pairs, describing particular parameters of a wallet. Set of names is subject to extend in the future.
          properties:
            ABSince:
              type: string
              format: date
              description: When was the first token of any ArtBlocks collection purchased
            ABCuratedSince:
              type: string
              format: date
              description: When was the first token of any ArtBlocks Curated collection purchased
            Series[X]ABCuratedCount:
              type: integer
              format: int32
              description: Amount of ArtBlocks Curated Series X (1-8) collections among which the user owns tokens
            AllABCuratedCount:
              type: integer
              format: int32
              description: Amount of ArtBlocks Curated collections among which the user owns tokens
            AllCryptoCitizensCount:
              type: integer
              format: int32
              description: Amount of CryptoCitizen collections among which the user owns tokens
          example:
            ABSince: "2021-06-05"
            ABCuratedSince: "2021-07-24"
            Series1ABCuratedCount: 6
            Series2ABCuratedCount: 13
            Series3ABCuratedCount: 12
            Series4ABCuratedCount: 9
            Series5ABCuratedCount: 7
            Series6ABCuratedCount: 7
            Series7ABCuratedCount: 5
            Series8ABCuratedCount: 8
            AllABCuratedCount: 67
            AllCryptoCitizensCount: 1

    ProfileInfoFull:
      allOf:
        - type: object
          required:
            - address
          properties:
            address:
              type: string
              description: Etherium address
              minLength: 42
              maxLength: 42
              pattern: ^0x[a-fA-F0-9]{40}$
              example: "0x9df947cd8a9810964473339c38a95201ecbe112d"
        - $ref: '#/components/schemas/ProfileInfo'

    ProfilesSearchConf:
      type: object
      required:
        - query
      properties:
        query:
          type: object
          description: Filters configuration of the search resource. Every property defines one or more filtering conditions. Logical operation AND is used between the filtering conditions. At least one condition must be specified.
          properties:
            scores:
              type: object
              description: Conditions for different score values, combined with AND. At least one condition must be specified.
              properties:
                commitmentScore:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                commitmentScoreConfidence:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                tradingScore:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                tradingScoreConfidence:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                curationScore:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                curationScoreConfidence:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                ribbons:
                  type: array
                  description: List of ribbons to find. Profile should contain all of the values in its section ribbons.
                  items:
                    type: string
                    enum:
                      - Diamond holder
                      - Curator
                      - Master trader
            tags:
              type: object
              description: Filtering conditions on tags
              properties:
                allOf:
                  type: array
                  description: List of tag values to find. Profile should contain all of the tags. Exact match, case sensitive.
                  items:
                    type: string
                anyOf:
                  type: array
                  description: List of tag values to find. Profile should contain any of the tags. Exact match, case sensitive.
                  items:
                    type: string
            allByAuthors:
              type: object
              description: Filtering conditions on allByAuthors section
              properties:
                allOf:
                  type: array
                  description: List of allByAuthors values to find. Profile should contain all of the values in its section allByAuthors. Exact match, case sensitive.
                  items:
                    type: string
                anyOf:
                  type: array
                  description: List of allByAuthors values to find. Profile should contain any of the values in its section allByAuthors. Exact match, case sensitive.
                  items:
                    type: string
            attributes:
              type: object
              description: Filtering conditions on a number of key-value pairs, describing particular parameters of a wallet. Set of names is subject to extend in the future.
              properties:
                ABSince:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                ABCuratedSince:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                Series[X]ABCuratedCount:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                AllABCuratedCount:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
                AllCryptoCitizensCount:
                  $ref: '#/components/schemas/ProfilesSearchConfFunctions'
        limit:
          type: integer
          format: int32
          description: "Pagination: how many records to be returned per GET request. 1 to 1000."
          default: 100
        detailed:
          type: boolean
          description: "Result formatting: only addresses will be returned on GET request if false (by default). Otherwise all available scores and attributes will be returned for each profile."
          default: false
      example:
        query:
          scores:
            commitmentScore:
              gt: 4.5
            commitmentScoreConfidence:
              ge: 0.8
            ribbons:
              - Master trader
          tags:
            "allOf":
              - Grailer
              - All Series 1-8 AB Curated
          attributes:
            ABSince:
              gt: "2021-03-05"
        limit: 10

    ProfilesSearchConfFunctions:
      type: object
      description: Standard comparison functions to be applied to a score (number) or an attribute (date, number) - greater, less, etc. Combined with AND.
      properties:
        gt:
          oneOf:
            - type: integer
              format: int32
            - type: number
              format: float
            - type: string
          description: Greater than a value
        ge:
          oneOf:
            - type: integer
              format: int32
            - type: number
              format: float
            - type: string
          description: Greater than or equal to a value
        lt:
          oneOf:
            - type: integer
              format: int32
            - type: number
              format: float
            - type: string
          description: Less than a value
        le:
          oneOf:
            - type: integer
              format: int32
            - type: number
              format: float
            - type: string
          description: Less than or equal to a value

    ProfilesSearchResponse:
      type: object
      required:
        - data
        - hasMoreData
      properties:
        data:
          oneOf:
            - type: array
              items:
                type: string
                minLength: 42
                maxLength: 42
                pattern: ^0x[a-fA-F0-9]{40}$
                example: "0x9df947cd8a9810964473339c38a95201ecbe112d"
            - type: array
              items:
                $ref: '#/components/schemas/ProfileInfoFull'
        hasMoreData:
          type: boolean
          description: A flag indicating whether there are more data or not
          example: true

    ProfilesSearchSimpleResponse:
      allOf:
        - $ref: '#/components/schemas/ProfilesSearchResponse'
        - type: object
          required:
            - cursor
          properties:
            cursor:
              type: string
              description: Cursor to request the next page of profiles for a subsequent call
              nullable: true
              example: "0x9df947cd8a9810964473339c38a95201ecbe112d"

    ErrorDetails:
      required:
        - error
      properties:
        error:
          type: string
          example: specific error message will be here
          
  responses:
    # 4xx:
    BadRequestError: # 400
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDetails"
      description: Bad request
    UnauthorizedError: # 401
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDetails"
      description: Unauthorized
    ForbiddenError: # 403
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDetails"
      description: Forbidden
    NotFoundError: # 404
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDetails"
      description: Not Found
    TooManyRequestsError: # 429
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDetails"
      description: Too Many Requests
      
    # 5xx:
    InternalServerError: # 500
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDetails"
      description: Internal server error